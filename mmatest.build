<project default="build" name="Mma-Test">
	<property name="project.FormalName" value="mmatest"/>
	<property name="dir.output" value="${mma.web.bin.package}"/>
	<mkdir dir="${dir.output}" unless="${directory::exists(dir.output)}" />
	<property name="project.output" value="${path::combine(dir.output, project.FormalName+'.exe')}" />
	<property name="project.debug" value="${project.output+'.'+debug.ext}"/>
	<property name="target.type" value="exe"/>
	<if test="${not property::exists('debug')}">
		<property name="debug" value="false" />
	</if>
	<!-- let the builder specify what they want -->
 	<target name="init" description="Initialize settings">
		<mkdir dir="${dir.output}" unless="${directory::exists(dir.output)}"/>
    	<property name="define" value="" />
    	<property name="optimize" value="false" />
    	<property name="incremental" value="true" />
    	<property name="unsafe" value="/unsafe-"/>
    	<property name="doc" value="" />
    	<property name="removeintchecks" value="false" />
			<if test="${debug == 'true'}">
	    	<property name="define" value="DEBUG;TRACE;NPGSQL" />
				<property name="optimize" value="false" />
				<property name="incremental" value="true" />
    		<property name="unsafe" value="/unsafe-"/>
    		<property name="doc" value="" />
   	 		<property name="removeintchecks" value="false" />
			</if>
	</target>

	<!-- if we need to copy dependencies into lib dir -->
	<target name="depends" description="Copy libraries we depend on" depends="init">
	</target>

	<target name="build" description="Compile project" depends="clean, depends">
		<csc target="${target.type}" output="${project.output}" debug="${debug}" define="${define}">
			<arg value="${unsafe}" />
			<sources>
				<include name="Test.cs" />
			</sources>
			<references>
				<include name="System.dll" />
				<include name="System.Data.dll" />
				<include name="System.Xml.dll" />
				<include name="${path::combine(dir.output, 'Npgsql.dll')}"/>
				<include name="${path::combine(dir.output, 'Mono.Security.dll')}"/>
				<include name="${path::combine(dir.output, 'base.dll')}"/>
				<include name="${path::combine(dir.output, 'bs.dll')}"/>
				<include name="${path::combine(dir.output, 'NLog.dll')}"/>
				<include name="${path::combine(dir.output, 'mma.dll')}"/>
				<include name="${path::combine(dir.output, 'socnetconn.dll')}"/>
			</references>
		</csc>
	</target>
	<target name="clean" depends="init" description="Clean up">
		<delete file="${project.output}" if="${file::exists(project.output)}" />
		<delete file="${project.debug}" if="${file::exists(project.debug)}" />
	</target>
</project>
